name: build

on:
  push:
  pull_request:
  schedule:
    - cron: 30 2 * * */21

jobs:
  R-test:
    name: Unit tests for R package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        R: [ 'oldrel', 'release', 'devel' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2-branch
        with:
          r-version: ${{ matrix.R }}

      - name: Install R dependency testthat
        run: |
          install.packages('testthat', type="source", force=T)
        shell: Rscript {0}

      - name: Install R dependency remotes
        run: |
          install.packages('remotes')
        shell: Rscript {0}

      - name: Install R package dependencies
        run: |
          remotes::install_deps(pkgdir='./R/', dependencies=T)
        shell: Rscript {0}

      - name: Build
        run: make test_R

  R-test-ubsan:
    name: Unit tests with sanitizer (ubuntu-latest, R-devel, ${{ matrix.compiler }} ASAN/UBSAN)
    runs-on: ubuntu-latest
    container: wch1/r-debug
    strategy:
      fail-fast: false
      matrix:
        include:
          - sanitizer: san
            compiler: gcc
          - sanitizer: csan
            compiler: clang
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install packages
        shell: bash
        run: |
          cd R
          RDscript${{ matrix.sanitizer }} -e "install.packages(c('testthat'))"
          RD${{ matrix.sanitizer }} CMD build .
          RD${{ matrix.sanitizer }} CMD INSTALL SyncRNG_*.tar.gz || exit -1

      - name: Run tests with sanitizer
        shell: bash
        run: |
          cd R/tests
          exit_code=0
          RDscript${{ matrix.sanitizer }} testthat.R >> tests.log 2>&1 || exit_code=-1
          cat ./tests.log
          exit ${exit_code}

  python-test:
    name: Unit tests for Python package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        py: [ '3.6', '3.10' ] # minimal and latest
    steps:
      - name: Install Python ${{ matrix.py }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        run: make test_python_direct

